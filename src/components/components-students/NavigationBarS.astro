---
// Importa tus estilos CSS
import "../../style/NavigationBar.css"; // Este archivo CSS ahora incluye los estilos para los modales y offcanvas.
// Si tu logo está en la carpeta 'public' o 'assets', la ruta es correcta.
---

<nav class="bar-search">
  <div class="bar-content">
    <!-- Logo del Sistema Escolar -->
    <div class="bar-search__logo">
      <img src="/public/SVG/Logo-1.svg" alt="Logo del Sistema Escolar" />
    </div>

    <!-- Barra de búsqueda -->
    <div class="search" id="search">
      <input
        type="text"
        class="search__input search__input--global"
        placeholder="Buscar Profesor..."
        id="search-input"
      />
      <ul id="search-results" class="search-results">
        <li class="search-result-item">
          <i class="bx bx-search"></i>Gestión de Usuarios
        </li>
        <li class="search-result-item">
          <i class="bx bx-search"></i>Control de Notas
        </li>
        <li class="search-result-item">
          <i class="bx bx-search"></i>Reportes
        </li>
        <li class="search-result-item">
          <i class="bx bx-search"></i>Configuración
        </li>
        <li class="search-result-item"><i class="bx bx-search"></i>Ayuda</li>
      </ul>
      <button class="search__button">
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="24"
          height="24"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round"
          stroke-linejoin="round"
          class="icon icon-tabler icons-tabler-outline icon-tabler-search"
        >
          <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
          <path d="M10 10m-7 0a7 7 0 1 0 14 0a7 7 0 1 0 -14 0"></path>
          <path d="M21 21l-6 -6"></path>
        </svg>
      </button>
    </div>

    <!-- Contenedor de iconos de navegación (campana, usuario, ajustes) -->
    <div class="icons-nav">
      <div class="icons-content">
        <!-- Campana de notificaciones con offcanvas -->
        <div class="notification-container">
          <button
            class="bar-icons btn-icon"
            type="button"
            data-bs-toggle="offcanvas"
            data-bs-target="#offcanvasNotifications"
            aria-controls="offcanvasNotifications"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="24"
              height="24"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
              stroke-linecap="round"
              stroke-linejoin="round"
              class="icon icon-tabler icons-tabler-outline icon-tabler-bell"
            >
              <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
              <path
                d="M10 5a2 2 0 1 1 4 0a7 7 0 0 1 4 6v3a4 4 0 0 0 2 3h-16a4 4 0 0 0 2 -3v-3a7 7 0 0 1 4 -6"
              ></path>
              <path d="M9 17v1a3 3 0 0 0 6 0v-1"></path>
            </svg>
            <span class="notification"></span>
          </button>

          <!-- Offcanvas de notificaciones -->
          <div
            class="offcanvas offcanvas-start"
            data-bs-scroll="true"
            data-bs-backdrop="false"
            tabindex="-1"
            id="offcanvasNotifications"
            aria-labelledby="offcanvasNotificationsLabel"
          >
            <div class="offcanvas-header">
              <h5 class="offcanvas-title" id="offcanvasNotificationsLabel">
                Comentarios
              </h5>
              <button
                type="button"
                class="btn-close"
                data-bs-dismiss="offcanvas"
                aria-label="Close"
              >
                <i class="bx bx-chevrons-left"></i>
              </button>
            </div>
            <div class="noticatacion-card">
              <!-- Aquí se inyectan dinámicamente los comentarios -->
              <p class="text-center text-muted p-4">Cargando comentarios...</p>
            </div>
            <hr />
            <button class="btn-view-all">Ver todos los comentarios</button>
          </div>
        </div>

        <!-- Botón de escudo de usuario (no se le agregó funcionalidad en los scripts) -->
        <button class="bar-icons btn-icon">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
            class="icon icon-tabler icons-tabler-outline icon-tabler-user-shield"
          >
            <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
            <path d="M6 21v-2a4 4 0 0 1 4 -4h2"></path>
            <path
              d="M22 16c0 4 -2.5 6 -3.5 6s-3.5 -2 -3.5 -6c1 0 2.5 -.5 3.5 -1.5c1 1 2.5 1.5 3.5 1.5z"
            ></path>
            <path d="M8 7a4 4 0 1 0 8 0a4 4 0 0 0 -8 0"></path>
          </svg>
        </button>

        <!-- Botón de configuración (no se le agregó funcionalidad en los scripts) -->
        <button class="bar-icons btn-icon">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
            class="icon icon-tabler icons-tabler-outline icon-tabler-settings"
          >
            <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
            <path
              d="M10.325 4.317c.426 -1.756 2.924 -1.756 3.35 0a1.724 1.724 0 0 0 2.573 1.066c1.543 -.94 3.31 .826 2.37 2.37a1.724 1.724 0 0 0 1.065 2.572c1.756 .426 1.756 2.924 0 3.35a1.724 1.724 0 0 0 -1.066 2.573c.94 1.543 -.826 3.31 -2.37 2.37a1.724 1.724 0 0 0 -2.572 1.065c-.426 1.756 -2.924 1.756 -3.35 0a1.724 1.724 0 0 0 -2.573 -1.066c-1.543 .94 -3.31 -.826 -2.37 -2.37a1.724 1.724 0 0 0 -1.065 -2.572c-1.756 -.426 -1.756 -2.924 0 -3.35a1.724 1.724 0 0 0 1.066 -2.573c-.94 -1.543 .826 -3.31 2.37 -2.37c1 .608 2.296 .07 2.572 -1.065z"
            ></path>
            <path d="M9 12a3 3 0 1 0 6 0a3 3 0 0 0 -8 0"></path>
          </svg>
        </button>
      </div>

      <!-- Imagen de perfil de usuario con offcanvas -->
      <img
        class="Perfil-icons"
        src="/public/img/foto.jpg"
        alt="Imagen de perfil de usuario"
        data-bs-toggle="offcanvas"
        data-bs-target="#offcanvasWithBothOptions"
        aria-controls="offcanvasWithBothOptions"
      />

      <!-- Offcanvas de perfil de usuario -->
      <div
        class="offcanvas offcanvas-start"
        data-bs-scroll="true"
        tabindex="-1"
        id="offcanvasWithBothOptions"
        aria-labelledby="offcanvasWithBothOptionsLabel"
      >
        <div class="offcanvas-header">
          <h5 class="offcanvas-title" id="offcanvasWithBothOptionsLabel">
            Perfil
          </h5>
          <button
            type="button"
            class="btn-close"
            data-bs-dismiss="offcanvas"
            aria-label="Close"
          >
            <i class="bx bx-chevrons-left"></i>
          </button>
        </div>
        <div class="offcanvas-body-profile">
          <div class="img-perfil-contetner">
            <img
              class="img-perfil"
              src="/public/img/foto.jpg"
              alt="Imagen de perfil de usuario"
            />
            <i class="bx bx-pencil"></i>
          </div>
          <div class="info-person-perfil">
            <h5 id="nombreUsuario" class="title-perfil">Cargando...</h5>
            <p id="emailUsuario" class="email-person">Cargando...</p>
            <span id="rolUsuario" class="type-user">Cargando...</span>
          </div>
          <hr />
          <div class="edit-close-perfil">
            <button class="btn-edit-perfil" id="editProfileNavButton">
              <i class="bx bx-pencil"></i> Editar
            </button>
            <button class="btn-close-perfil" id="logoutButton">
              <i class="bx bx-log-out"></i> Cerrar Sesión
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>
</nav>

<!-- Nuevo Modal para ver el mensaje completo del comentario -->
<div class="modal fade" id="modalVerMensaje" tabindex="-1" aria-labelledby="modalVerMensajeLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="modalVerMensajeLabel">Mensaje del Remitente</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar"></button>
      </div>
      <div class="modal-body">
        <p><strong>De:</strong> <span id="remitenteNombre"></span> (<span id="remitenteRol"></span>)</p>
        <p><strong>Fecha:</strong> <span id="mensajeFecha"></span></p>
        <hr>
        <p style="font-size: 20px;"><strong>Actividad:</strong> <span id="actividad"></span></p>
        <p style="font-size: 16px;"><strong>Mensaje:</strong> <span id="mensajeCompleto"></span></p>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
      </div>
    </div>
  </div>
</div>

<!-- Toast “Listo” (confirmación de éxito) -->
<div class="toast-container position-fixed top-0 end-0 p-3">
  <div id="toastConfirmacion"
       class="toast align-items-center text-white bg-success border-0"
       role="alert" aria-live="assertive" aria-atomic="true">
    <div class="d-flex">
      <div class="toast-body">
        ¡Listo! El usuario ha sido procesado.
      </div>
      <button type="button"
              class="btn-close btn-close-white me-2 m-auto"
              data-bs-dismiss="toast" aria-label="Cerrar"></button>
    </div>
  </div>
</div>

<!-- Toast de Error (para errores de logout u otros) -->
<div class="toast-container position-fixed top-0 end-0 p-3">
  <div id="toastError"
       class="toast align-items-center text-white bg-danger border-0"
       role="alert" aria-live="assertive" aria-atomic="true">
    <div class="d-flex">
      <div class="toast-body" id="toastErrorBody">
        Hubo un error. Por favor, inténtalo de nuevo.
      </div>
      <button type="button"
              class="btn-close btn-close-white me-2 m-auto"
              data-bs-dismiss="toast" aria-label="Cerrar"></button>
    </div>
  </div>
</div>


<script type="module">
  // Importa Bootstrap Bundle con Popper para que los offcanvas y modales funcionen
  import 'https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js';

  // Base URL for your API, make sure it is correct.
  const API_BASE_URL = 'http://localhost:3001/api';

  document.addEventListener('DOMContentLoaded', () => {
    console.log('DOM completamente cargado. Inicializando funciones de navegación.');
    cargarUsuarioLogueado();
    cargarComentariosEstudiante(); // Cambiado de cargarNotificaciones a cargarComentariosEstudiante
    configurarLogout();
    // NOTA: Las funciones relacionadas con el modal de asignación de usuario (para admin)
    // han sido removidas de este archivo navEst.txt ya que no corresponden al rol de estudiante.
    const editProfileNavButton = document.getElementById('editProfileNavButton');
    if (editProfileNavButton) {
      editProfileNavButton.addEventListener('click', () => {
        // Redirige a la página de perfil al hacer clic en el botón
        window.location.href = '/Students-Control/Editar-perfil'; 
      });
    }
  });

  // Función para mostrar un toast de error
  function mostrarToastError(message = 'Ocurrió un error inesperado.') {
    const toastErrorEl = document.getElementById('toastError');
    const toastErrorBody = document.getElementById('toastErrorBody');
    if (toastErrorBody) {
      toastErrorBody.textContent = message;
    }
    if (toastErrorEl) {
      const toast = new bootstrap.Toast(toastErrorEl);
      toast.show();
    } else {
      console.error("No se encontró el elemento 'toastError' para mostrar el mensaje:", message);
    }
  }


  // 1) Carga datos del usuario logueado en el offcanvas de perfil
  async function cargarUsuarioLogueado() {
    try {
      const res = await fetch('http://localhost:3001/usuario', { // Asume que esta ruta devuelve los datos del usuario logueado
        method: 'GET',
        credentials: 'include' // Incluye cookies de sesión
      });
      const data = await res.json();

      if (!res.ok || !data.id) {
        // Si la respuesta no es OK o no hay ID de usuario, registra un error y no actualiza la UI
        console.warn('No se pudo obtener datos del usuario logueado o el usuario no está autenticado.');
        // Puedes optar por dejar los textos en "Cargando..." o poner "No disponible"
        return;
      }

      // Actualiza los datos en la interfaz del perfil
      document.getElementById('nombreUsuario').textContent = `${data.primer_nombre} ${data.primer_apellido}`;
      document.getElementById('emailUsuario').textContent = data.correo;
      document.getElementById('rolUsuario').textContent = data.rol;
    } catch (error) {
      console.error('❌ Error obteniendo datos del usuario:', error);
      // No mostrar toast de error aquí, ya que es una carga inicial y podría ser normal si no hay sesión
    }
  }

  // 2) Carga comentarios (antes "notificaciones") y las inyecta en el offcanvas
  async function cargarComentariosEstudiante() {
    const btnBell = document.querySelector('.notification-container button');
    const dot = btnBell.querySelector('.notification');
    const container = document.querySelector('.noticatacion-card');
    container.innerHTML = `<p class="text-center text-muted p-4">Cargando comentarios...</p>`; // Mensaje de carga inicial

    try {
      // **CAMBIADO**: Ahora llama a la API de comentarios para estudiantes
      const resp = await fetch(`${API_BASE_URL}/comentarios`, { 
        credentials: 'include'
      });
      const { comentarios } = await resp.json(); // La API debe devolver { comentarios: [...] }

      if (comentarios.length > 0) {
        dot.style.display = 'block'; // Muestra el punto si hay comentarios
      } else {
        dot.style.display = 'none'; // Oculta el punto si no hay comentarios
        container.innerHTML = `<p class="text-center text-muted p-4">Sin comentarios pendientes</p>`;
        return;
      }

      container.innerHTML = ''; // Limpia el mensaje de carga antes de añadir los comentarios

      // Añade los comentarios dinámicamente
      comentarios.forEach(c => {
        const card = document.createElement('div');
        card.className = 'offcanvas-body notificacion-item'; // Clase para aplicar estilos
        // No necesitamos data-notificacionId ni data-usuarioId si no se va a procesar en un modal de admin
        card.innerHTML = `
          <div class="notification-content">
            <i class="bx bx-user-circle"></i>
          </div>
          <div class="notification-text">
            <h6 class="name-user-notifi">
              ${c.nombre_emisor} ${c.apellido_emisor} <span>(${c.rol_emisor})</span>
            </h6>
            <p class="message-user-notifi">Actividad: <strong>${c.nombre_actividad}</strong></p>
            <small class="text-info">${c.fecha_hora_formateada}</small>
          </div>`;
        // **CAMBIADO**: Abre el nuevo modal de ver mensaje al hacer clic
        card.addEventListener('click', () => abrirModalVerMensaje(c));
        container.appendChild(card);
      });
    } catch (error) {
      console.error('Error cargando comentarios para el estudiante:', error);
      container.innerHTML = `<p class="text-center text-danger p-4">Error al cargar comentarios.</p>`;
      mostrarToastError(`Error al cargar comentarios: ${error.message}`);
    }
  }

  // **NUEVA FUNCIÓN**: Abrir modal para ver el mensaje completo de un comentario
  function abrirModalVerMensaje(comentario) {
    document.getElementById('remitenteNombre').textContent = `${comentario.nombre_emisor} ${comentario.apellido_emisor}`;
    document.getElementById('remitenteRol').textContent = comentario.rol_emisor;
    document.getElementById('mensajeFecha').textContent = comentario.fecha_hora_formateada;
    document.getElementById('actividad').textContent = comentario.nombre_actividad;
    document.getElementById('mensajeCompleto').textContent = comentario.mensaje;

    const modalVerMensaje = new bootstrap.Modal(document.getElementById('modalVerMensaje'));
    modalVerMensaje.show();
  }


  // 6) Configurar logout
  function configurarLogout() {
    const btn = document.getElementById('logoutButton');
    if (!btn) {
      console.warn('El botón con ID "logoutButton" no fue encontrado en el DOM.');
      return;
    }
    btn.addEventListener('click', async (event) => {
      event.preventDefault(); // Evita el comportamiento por defecto del botón
      try {
        const response = await fetch('http://localhost:3001/logout', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          credentials: 'include'
        });

        if (response.ok) {
          const data = await response.json();
          console.log('Respuesta del backend al logout:', data.message);
          // Opcional: Elimina cualquier bandera de sesión que tengas en localStorage
          localStorage.removeItem('isLoggedIn');
          // Redirige al usuario
          window.location.href = '/';
        } else {
          const errorData = await response.json();
          console.error('Error al cerrar sesión en el backend:', errorData.error || response.statusText);
          mostrarToastError(`Error al cerrar sesión: ${errorData.error || response.statusText}`);
        }
      } catch (error) {
        console.error('Error de red o del servidor al cerrar sesión:', error);
        mostrarToastError('No se pudo conectar con el servidor para cerrar la sesión.');
      }
    });
  }

  // --- LAS SIGUIENTES FUNCIONES HAN SIDO ELIMINADAS/COMENTADAS ---
  // Las funciones `abrirModalAsignacion`, `cargarSelect` y `configurarAsignacion`
  // son para la gestión de usuarios (admin) y no son parte de la funcionalidad
  // del menú de navegación de un estudiante. Para mantener el código limpio y
  // enfocado al rol del archivo, se asume que esta lógica se encuentra
  // en los archivos correspondientes al panel de administración.
  // Si las necesitas en otro contexto, deberás gestionarlas allí.
</script>
