---
import "../../style/style-admin/estudiantes.css"; /* Ahora solo importa est-c.txt */
---
<section class="data-content-section">
  <section class="estudiantes-header-card">
    <div class="welcome-search-data">
      <h2 class="welcome-search-data__title">Historial</h2>
    </div>
  </section>

  <div class="display-table" id="table1">
    <div class="tabla-info-person">
      <table class="table table-dark table-hover table-striped">
        <thead>
          <tr>
            <th>ID</th>
            <th>Usuario</th>
            <th>Acción</th>
            <th>Tabla afectada</th>
            <th>ID registro</th>
            <th>Datos anteriores</th>
            <th>Datos nuevos</th>
            <th>Fecha y hora</th>
            <th>IP</th>
          </tr>
        </thead>
        <tbody id="historialTableBody">
          <tr>
            <td colspan="9" class="text-center">Cargando Historial...</td>
          </tr>
        </tbody>
      </table>
    </div>
    <div id="paginationControls" class="pagination text-center mt-3"></div>
  </div>
</section>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" crossorigin="anonymous"></script>
<script is:inline>
  document.addEventListener('DOMContentLoaded', function () {
    let currentPage = 1;
    const itemsPerPage = 10;
    const historialTableBody = document.getElementById('historialTableBody');
    const paginationControls = document.getElementById('paginationControls');

    function formatearJson(texto) {
      if (!texto) return 'N/A';
      try {
        const datos = JSON.parse(texto);
        return Object.entries(datos)
          .map(([k, v]) => `${k}: ${v}`)
          .join('<br>');
      } catch {
        return texto;
      }
    }

    async function loadHistorial(page) {
  historialTableBody.innerHTML = `<tr><td colspan="9" class="text-center">Cargando historial...</td></tr>`;
  paginationControls.innerHTML = '';

  try {
    const response = await fetch(`http://localhost:3001/api/historial?pagina=${page}&porPagina=${itemsPerPage}`, {
      method: 'GET',
      credentials: 'include',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${localStorage.getItem('token') || ''}`
      }
    });

    if (!response.ok) {
      if (response.status === 401) {
        window.location.href = '/login';
        return;
      }
      throw new Error(`Error HTTP: ${response.status}`);
    }

    const data = await response.json();
    console.log("Respuesta completa del backend:", data);

    // Manejo más robusto de la respuesta
    const historial = data.datos || data.historial || data; // Intenta con varios posibles nombres
    const pagination = data.paginacion || {
      totalPaginas: Math.ceil((data.totalRegistros || historial.length) / itemsPerPage),
      pagina: page
    };
    
    const totalPages = pagination.totalPaginas || 1;
    currentPage = pagination.pagina || page;

    historialTableBody.innerHTML = '';

    if (!historial || historial.length === 0) {
      historialTableBody.innerHTML = `<tr><td colspan="9" class="text-center text-muted">No se encontraron registros de historial.</td></tr>`;
      return;
    }

    historial.forEach((registro) => {
      const row = document.createElement('tr');
      row.innerHTML = `
        <td>${registro.id_historial}</td>
        <td>${registro.primer_nombre || 'Usuario'} ${registro.primer_apellido || ''}</td>
        <td>${registro.accion}</td>
        <td>${registro.tabla_afectada || 'N/A'}</td>
        <td>${registro.id_registro_afectado || 'N/A'}</td>
        <td>${formatearJson(registro.datos_anteriores)}</td>
        <td>${formatearJson(registro.datos_nuevos)}</td>
        <td>${new Date(registro.fecha_hora).toLocaleString()}</td>
        <td>${registro.ip || 'N/A'}</td>
      `;
      historialTableBody.appendChild(row);
    });

    setupPagination(totalPages, currentPage);
  } catch (error) {
    console.error('Error al cargar historial:', error);
    historialTableBody.innerHTML = `<tr><td colspan="9" class="text-center text-danger">Error al cargar historial. ${error.message}</td></tr>`;
  }
}

    function setupPagination(totalPages, currentPage) {
      paginationControls.innerHTML = '';
      if (totalPages <= 1) return;

      const ul = document.createElement('ul');
      ul.className = 'pagination-list flex justify-center items-center gap-2';

      const crearLink = (text, page, disabled = false, active = false) => {
        const li = document.createElement('li');
        li.className = `page-item ${disabled ? 'disabled' : ''} ${active ? 'active' : ''}`;
        const a = document.createElement('a');
        a.className = `page-link rounded-lg px-3 py-1 ${active ? 'bg-purple-800' : 'bg-gray-700'} text-white hover:bg-purple-600`;
        a.href = '#';
        a.textContent = text;
        if (!disabled) {
          a.addEventListener('click', (e) => {
            e.preventDefault();
            loadHistorial(page);
          });
        }
        li.appendChild(a);
        return li;
      };

      ul.appendChild(crearLink('Anterior', currentPage - 1, currentPage === 1));

      for (let i = 1; i <= totalPages; i++) {
        ul.appendChild(crearLink(i, i, false, i === currentPage));
      }

      ul.appendChild(crearLink('Siguiente', currentPage + 1, currentPage === totalPages));

      paginationControls.appendChild(ul);
    }

    loadHistorial(1);
  });
</script>
