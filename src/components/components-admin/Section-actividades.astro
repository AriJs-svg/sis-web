---
// src/pages/admin/actividades.astro
import "../../style/style-admin/actividades.css";

// Obtener el ID de la materia de los parámetros de la URL
// En Astro, para acceder a los query parameters en el script de frontmatter,
// puedes usar `Astro.url.searchParams`. Para el lado del cliente (is:inline),
// se usa `window.location.searchParams`.
const materiaId = Astro.url.searchParams.get('materiaId');

// Necesitamos un script para cargar el nombre de la materia en el cliente
// y usarlo en el título.
---


<section class="data-content-section">
  <!-- Título principal de la sección -->
  <section class="actividades-header-card mb-4">
    <div class="welcome-search-data">
      <h2 class="welcome-search-data__title">Actividades</h2>
    </div>
  </section>

  <!-- Filtros de selección en tarjeta -->
  <div class="card shadow-sm mb-4" style="border-radius: 16px;" id="filtrosCard">
    <div class="card-body">
      <div class="row justify-content-center align-items-end">
        <div class="col-md-3 mb-2 mb-md-0">
          <label for="selectCurso" class="form-label fw-bold">Curso</label>
          <select class="form-select" id="selectCurso" disabled>
            <option value="">Cargando cursos...</option>
          </select>
        </div>
        <div class="col-md-3 mb-2 mb-md-0">
          <label for="selectPeriodo" class="form-label fw-bold">Período</label>
          <select class="form-select" id="selectPeriodo" disabled>
            <option value="">Cargando períodos...</option>
          </select>
        </div>
        <div class="col-md-3">
          <label for="selectMateria" class="form-label fw-bold">Materia</label>
          <select class="form-select" id="selectMateria" disabled>
            <option value="">Selecciona primero curso y período</option>
          </select>
        </div>
        <div class="col-md-3 d-flex align-items-end justify-content-center">
          <button class="btn btn-primary w-100" id="btnBuscarActividades" disabled>Buscar</button>
        </div>
      </div>
    </div>
  </div>

  <!-- Encabezado de actividades, solo visible tras buscar -->
  <div id="headerActividades" style="display:none;"></div>

  <!-- Sección de actividades, solo visible tras buscar -->
  <div id="actividadesSection" style="display:none;">
    <!-- Sección de Tarjeta Consolidada de Resumen de Actividades -->
    <section class="content-info-data">
      <section class="data-general-control">
        <!-- Tarjeta Consolidada de Actividades -->
        <div class="registro-control consolidated-actividades-card">
          <div class="card-icon-title">
            <i class='bx bx-task'></i> <!-- Icono para actividades -->
            <h5 class="card-title">Resumen de Actividades</h5>
          </div>
          <div class="actividades-summary-grid">
            <div class="summary-item">
              <span class="summary-count" id="totalActividadesCount">0</span>
              <span class="summary-label">Total</span>
            </div>
            <div class="summary-item">
              <span class="summary-count" id="promedioGeneralMateria">0.00</span>
              <span class="summary-label">Promedio Materia</span>
            </div>
            <div class="summary-item">
              <span class="summary-count" id="estudiantesEnMateriaCount">0</span>
              <span class="summary-label">Estudiantes</span>
            </div>
          </div>
          <!-- Botón para añadir actividad, dentro de la tarjeta de resumen -->
          <div class="mt-3 text-center">
            <div class="btn-accion-control">
              <button class="btn btn-card" id="btnAnadirActividad" data-bs-toggle="modal" data-bs-target="#modalAnadirActividad">
                <i class='bx bx-plus me-2'></i>Añadir Actividad
              </button>
            </div>
          </div>
        </div>
      </section>
      <!-- Botón Cambiar búsqueda debajo de la tarjeta, alineado a la derecha -->
      <div class="d-flex justify-content-end mt-3">
        <button class="btn btn-outline-secondary btn-cambiar-busqueda btn-sm" id="btnCambiarBusqueda" type="button"><i class='bx bx-arrow-back'></i> Cambiar búsqueda</button>
      </div>
    </section>

    <!-- La tabla de Actividades -->
    <div class="display-table" id="tableActividades">
      <div class="d-flex justify-content-end mb-3">
        <input type="text" id="searchInput" class="form-control w-25" placeholder="Buscar actividad...">
      </div>
      <div class="tabla-info-person">
        <table class="table table-dark table-striped">
          <thead>
            <tr>
              <th scope="col">Nº</th>
              <th scope="col">Nombre de la Actividad</th>
              <th scope="col">Descripción</th>
              <th scope="col">Fecha de Entrega</th>
              <th scope="col">Ponderación</th>
              <th scope="col">Acciones</th>
            </tr>
          </thead>
          <tbody id="actividadesTableBody">
            <!-- Contenido de la tabla de actividades se carga aquí dinámicamente -->
            <tr>
              <td colspan="7" class="text-center">Cargando actividades...</td>
            </tr>
          </tbody>
        </table>
      </div>

      <!-- Paginación -->
      <nav aria-label="Page navigation" class="pagination-container">
        <ul class="pagination-list" id="paginationActividades">
          <!-- Los botones de paginación se insertarán aquí -->
        </ul>
      </nav>
    </div>
  </div>
</section>

<!-- Modales -->

<!-- Modal para Añadir Actividad -->
<div class="modal fade" id="modalAnadirActividad" tabindex="-1" aria-labelledby="modalAnadirActividadLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered modal-dialog-custom-width">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="modalAnadirActividadLabel">Añadir Nueva Actividad</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar">
          <i class='bx bx-x'></i>
        </button>
      </div>
      <div class="modal-body">
        <form id="formAnadirActividad">
          <div class="mb-3">
            <label for="nombreActividad" class="form-label">Nombre de la Actividad <span class="campo-obligatorio">*</span></label>
            <input type="text" class="form-control" id="nombreActividad" required>
            <div class="invalid-feedback">Por favor, ingresa el nombre de la actividad.</div>
          </div>
          <div class="mb-3">
            <label for="descripcionActividad" class="form-label">Descripción (Opcional)</label>
            <textarea class="form-control" id="descripcionActividad" rows="3"></textarea>
          </div>
          <div class="mb-3">
            <label for="fechaEntrega" class="form-label">Fecha de Entrega <span class="campo-obligatorio">*</span></label>
            <input type="date" class="form-control" id="fechaEntrega" required>
            <div class="invalid-feedback">Por favor, ingresa la fecha de entrega.</div>
          </div>
          <div class="mb-3">
            <label for="ponderacion" class="form-label">Ponderación <span class="campo-obligatorio">*</span></label>
            <input type="number" class="form-control" id="ponderacion" required min="0" max="100" step="0.01">
            <div class="invalid-feedback">Por favor, ingresa la ponderación.</div>
          </div>
          <div class="d-flex justify-content-between mt-4">
            <button type="reset" class="btn btn-secondary">Limpiar</button>
            <button type="submit" class="btn btn-primary">Añadir Actividad</button>
          </div>
        </form>
      </div>
    </div>
  </div>
</div>

<!-- Modal para Editar Actividad -->
<div class="modal fade" id="modalEditarActividad" tabindex="-1" aria-labelledby="modalEditarActividadLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered modal-dialog-custom-width">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="modalEditarActividadLabel">Editar Actividad</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar">
          <i class='bx bx-x'></i>
        </button>
      </div>
      <div class="modal-body">
        <form id="formEditarActividad">
          <input type="hidden" id="editActividadId">
          <div class="mb-3">
            <label for="editNombreActividad" class="form-label">Nombre de la Actividad <span class="campo-obligatorio">*</span></label>
            <input type="text" class="form-control" id="editNombreActividad" required>
            <div class="invalid-feedback">Por favor, ingresa el nombre de la actividad.</div>
          </div>
          <div class="mb-3">
            <label for="editDescripcionActividad" class="form-label">Descripción (Opcional)</label>
            <textarea class="form-control" id="editDescripcionActividad" rows="3"></textarea>
          </div>
          <div class="mb-3">
            <label for="editFechaEntrega" class="form-label">Fecha de Entrega <span class="campo-obligatorio">*</span></label>
            <input type="date" class="form-control" id="editFechaEntrega" required>
            <div class="invalid-feedback">Por favor, ingresa la fecha de entrega.</div>
          </div>
          <div class="mb-3">
            <label for="editPonderacion" class="form-label">Ponderación <span class="campo-obligatorio">*</span></label>
            <input type="number" class="form-control" id="editPonderacion" required min="0" max="100" step="0.01">
            <div class="invalid-feedback">Por favor, ingresa la ponderación.</div>
          </div>
          <div class="d-flex justify-content-between mt-4">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
            <button type="submit" class="btn btn-primary">Guardar Cambios</button>
          </div>
        </form>
      </div>
    </div>
  </div>
</div>

<!-- Modal para calificar estudiantes -->
<div class="modal fade" id="modalCalificarEstudiantes" tabindex="-1" aria-labelledby="modalCalificarEstudiantesLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="modalCalificarEstudiantesLabel">Calificar Estudiantes</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar"></button>
      </div>
      <div class="modal-body">
        <div class="mb-3">
          <strong>Actividad:</strong> <span id="nombreActividadCalificar">Cargando...</span><br>
          <strong>Materia:</strong> <span id="nombreMateriaCalificar">Cargando...</span>
        </div>
        <form id="formCalificarEstudiantes">
          <div id="listaEstudiantesNotas"></div>
          <div class="d-flex justify-content-end mt-3">
            <button type="submit" class="btn btn-primary">Guardar Notas</button>
          </div>
        </form>
      </div>
    </div>
  </div>
</div>

<!-- Scripts de Bootstrap y JavaScript personalizado -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>

<script is:inline>
  const API_BASE_URL = 'http://localhost:3001/api';
  let currentMateriaNombre = '';
  let currentMateriaId = null;
  let currentPage = 1;
  const itemsPerPage = 10;

  // Función robusta para mostrar alertas
  function mostrarAlerta(mensaje, tipo, duracion = 5000) {
    const alertContainer = document.getElementById('alertContainer') || (() => {
      const div = document.createElement('div');
      div.id = 'alertContainer';
      div.style.position = 'fixed';
      div.style.top = '20px';
      div.style.left = '50%';
      div.style.transform = 'translateX(-50%)';
      div.style.zIndex = '9999';
      div.style.width = 'auto';
      div.style.maxWidth = '90%';
      document.body.appendChild(div);
      return div;
    })();

    const alertElement = document.createElement('div');
    alertElement.className = `alert alert-${tipo} alert-dismissible fade show`;
    alertElement.role = 'alert';
    alertElement.textContent = mensaje;

    alertContainer.appendChild(alertElement);

    setTimeout(() => {
      // Usa Bootstrap's native dismiss method
      const bsAlert = new bootstrap.Alert(alertElement);
      bsAlert.dispose(); // Cierra el alerta y lo remueve del DOM
    }, duracion);
  }

  document.addEventListener('DOMContentLoaded', () => {
    cargarFiltros();
    const selectCurso = document.getElementById('selectCurso');
    const selectPeriodo = document.getElementById('selectPeriodo');
    const selectMateria = document.getElementById('selectMateria');
    const btnBuscar = document.getElementById('btnBuscarActividades');
    const actividadesSection = document.getElementById('actividadesSection');
    const filtrosCard = document.getElementById('filtrosCard');
    const btnCambiarBusqueda = document.getElementById('btnCambiarBusqueda');

    // Ocultar actividades al cargar la página
    actividadesSection.style.display = 'none';
    filtrosCard.style.display = '';

    // Habilitar el botón Buscar solo si hay materia seleccionada
    selectMateria.addEventListener('change', () => {
      btnBuscar.disabled = !selectMateria.value;
    });

    // Eliminar cualquier listener automático de carga de actividades
    // (No cargar actividades al cambiar materia, solo con el botón Buscar)

    btnBuscar.addEventListener('click', (e) => {
      e.preventDefault();
      if (selectMateria.value) {
        filtrosCard.style.display = 'none';
        actividadesSection.style.display = '';
        // Limpiar alertas previas
        const alertContainer = document.getElementById('alertContainer');
        if (alertContainer) alertContainer.innerHTML = '';
        // Guardar materia seleccionada
        currentMateriaId = selectMateria.value;
        // Cargar datos
        fetchMateriaDetails(currentMateriaId);
        fetchActividadesSummary(currentMateriaId);
        fetchActividades(currentMateriaId, 1);
      }
    });

    btnCambiarBusqueda.addEventListener('click', () => {
      filtrosCard.style.display = '';
      actividadesSection.style.display = 'none';
      // Limpiar selects y datos
      selectMateria.value = '';
      btnBuscar.disabled = true;
      document.getElementById('totalActividadesCount').textContent = '0';
      document.getElementById('promedioGeneralMateria').textContent = '0.00';
      document.getElementById('estudiantesEnMateriaCount').textContent = '0';
      document.getElementById('actividadesTableBody').innerHTML = '<tr><td colspan="7" class="text-center">Seleccione una materia y pulse Buscar.</td></tr>';
      document.getElementById('paginationActividades').innerHTML = '';
      // Limpiar la URL
      const url = new URL(window.location);
      url.searchParams.delete('materiaId');
      window.history.replaceState({}, '', url);
      currentMateriaId = null;
    });

    // Enlazar el formulario de añadir actividad
    const formAnadirActividad = document.getElementById('formAnadirActividad');
    if (formAnadirActividad) {
      formAnadirActividad.removeEventListener('submit', anadirActividad); // Evitar duplicados
      formAnadirActividad.addEventListener('submit', anadirActividad);
    }
  });

  // Lógica para cargar cursos, periodos y materias
  async function cargarFiltros() {
    const selectCurso = document.getElementById('selectCurso');
    const selectPeriodo = document.getElementById('selectPeriodo');
    const selectMateria = document.getElementById('selectMateria');
    selectCurso.innerHTML = '<option value="">Cargando cursos...</option>';
    selectPeriodo.innerHTML = '<option value="">Cargando períodos...</option>';
    selectMateria.innerHTML = '<option value="">Selecciona primero curso y período</option>';
    selectCurso.disabled = true;
    selectPeriodo.disabled = true;
    selectMateria.disabled = true;
    try {
      // Cargar cursos
      const cursos = await fetch(`${API_BASE_URL}/cursos`).then(r => r.json());
      if (Array.isArray(cursos) && cursos.length > 0) {
        selectCurso.innerHTML = '<option value="">Selecciona un curso</option>' + cursos.map(c => `<option value="${c.id_curso}">${c.nombre_curso || c.curso}</option>`).join('');
        selectCurso.disabled = false;
      } else {
        selectCurso.innerHTML = '<option value="">No hay cursos disponibles</option>';
      }
      // Cargar periodos
      const periodos = await fetch(`${API_BASE_URL}/periodos`).then(r => r.json());
      if (Array.isArray(periodos) && periodos.length > 0) {
        selectPeriodo.innerHTML = '<option value="">Selecciona un período</option>' + periodos.map(p => `<option value="${p.id_periodo}">${p.nombre_periodo || p.periodo}</option>`).join('');
        selectPeriodo.disabled = false;
      } else {
        selectPeriodo.innerHTML = '<option value="">No hay períodos disponibles</option>';
      }
    } catch (err) {
      selectCurso.innerHTML = '<option value="">Error al cargar cursos</option>';
      selectPeriodo.innerHTML = '<option value="">Error al cargar períodos</option>';
      selectCurso.disabled = true;
      selectPeriodo.disabled = true;
      selectMateria.innerHTML = '<option value="">Selecciona primero curso y período</option>';
      selectMateria.disabled = true;
      mostrarAlerta('Error al cargar cursos o períodos. Intenta recargar la página.', 'danger');
      return;
    }
    // Cuando cambie curso o periodo, cargar materias
    selectCurso.addEventListener('change', cargarMateriasFiltro);
    selectPeriodo.addEventListener('change', cargarMateriasFiltro);
    async function cargarMateriasFiltro() {
      const idCurso = selectCurso.value;
      const idPeriodo = selectPeriodo.value;
      selectMateria.disabled = true;
      selectMateria.innerHTML = '<option value="">Cargando materias...</option>';
      if (!idCurso || !idPeriodo) {
        selectMateria.innerHTML = '<option value="">Selecciona primero curso y período</option>';
        return;
      }
      try {
        const materias = await fetch(`${API_BASE_URL}/materias?curso=${idCurso}&periodo=${idPeriodo}`).then(r => r.json());
        if (Array.isArray(materias) && materias.length > 0) {
          selectMateria.innerHTML = '<option value="">Selecciona una materia</option>' + materias.map(m => `<option value="${m.id_materia}">${m.nombre_materia || m.materia}</option>`).join('');
          selectMateria.disabled = false;
        } else {
          selectMateria.innerHTML = '<option value="">No hay materias para este curso y período</option>';
          selectMateria.disabled = true;
        }
      } catch (err) {
        selectMateria.innerHTML = '<option value="">Error al cargar materias</option>';
        selectMateria.disabled = true;
        mostrarAlerta('Error al cargar materias. Intenta recargar la página.', 'danger');
      }
    }
  }

  async function fetchMateriaDetails(id) {
    try {
      const response = await fetch(`${API_BASE_URL}/materias-academicas/${id}`);
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      const data = await response.json();
      currentMateriaNombre = data.nombre_materia;
      if(document.getElementById('nombreMateriaHeader'))
        document.getElementById('nombreMateriaHeader').textContent = data.nombre_materia || '';
      if(document.getElementById('estudiantesEnMateriaCount'))
        document.getElementById('estudiantesEnMateriaCount').textContent = data.total_estudiantes_materia || '0';
    } catch (error) {
      console.error('Error al obtener detalles de la materia:', error);
      if(document.getElementById('nombreMateriaHeader'))
        document.getElementById('nombreMateriaHeader').textContent = 'Error';
      mostrarAlerta('No se pudo cargar los detalles de la materia.', 'danger');
    }
  }

  async function fetchActividadesSummary(idMateria) {
    try {
      const response = await fetch(`${API_BASE_URL}/materias/${idMateria}/actividades/resumen`);
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      const data = await response.json();
      console.log('DEBUG: Datos recibidos para resumen de actividades:', data); // Añadido para depuración
      if(document.getElementById('totalActividadesCount'))
        document.getElementById('totalActividadesCount').textContent = data.totalActividades || '0';
      if(document.getElementById('promedioGeneralMateria')) {
        // Asegurarse de que promedioGeneralMateria sea un número antes de formatear
        const promedio = parseFloat(data.promedioGeneralMateria);
        document.getElementById('promedioGeneralMateria').textContent = (typeof promedio === 'number' && !isNaN(promedio)) ? promedio.toFixed(2) : 'N/A';
      }
    } catch (error) {
      console.error('Error al obtener resumen de actividades:', error);
      mostrarAlerta('No se pudo cargar el resumen de actividades.', 'danger');
    }
  }

  async function fetchActividades(idMateria, page) {
    const tableBody = document.getElementById('actividadesTableBody');
    const paginationActividades = document.getElementById('paginationActividades');
    tableBody.innerHTML = '<tr><td colspan="7" class="text-center"><div class="spinner-border text-primary" role="status"><span class="visually-hidden">Cargando...</span></div> Cargando actividades...</td></tr>';
    paginationActividades.innerHTML = '';

    try {
      // Esta es la ruta que tu frontend usa para obtener las actividades paginadas
      const response = await fetch(`${API_BASE_URL}/materias/${idMateria}/actividades?page=${page}&limit=${itemsPerPage}`);
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      const data = await response.json();

      tableBody.innerHTML = ''; // Limpiar el mensaje de carga

      // Validar que data.actividades es un array antes de intentar acceder a su length
      // La respuesta esperada del backend es { actividades: [...], totalPages: X }
      if (!data || !Array.isArray(data.actividades) || data.actividades.length === 0) {
        tableBody.innerHTML = '<tr><td colspan="7" class="text-center">No se encontraron actividades para esta materia.</td></tr>';
        if (data && data.message) { 
             mostrarAlerta(data.message, 'info');
        } else if (currentMateriaId) { 
             mostrarAlerta('No se encontraron actividades para esta materia o hubo un problema al cargarlas.', 'info');
        }
        return;
      }

      data.actividades.forEach((actividad, index) => {
        const row = tableBody.insertRow();
        const fechaEntrega = actividad.fecha_entrega ? new Date(actividad.fecha_entrega).toLocaleDateString() : 'N/A';
        row.innerHTML = `
          <td>${((page - 1) * itemsPerPage) + index + 1}</td>
          <td>${actividad.nombre_actividad}</td>
          <td title="${actividad.descripcion}">${actividad.descripcion ? (actividad.descripcion.length > 50 ? actividad.descripcion.substring(0, 50) + '...' : actividad.descripcion) : 'Sin descripción'}</td>
          <td>${fechaEntrega}</td>
          <td>${actividad.ponderacion ? actividad.ponderacion.toFixed(2) : 'N/A'}</td>
          <td>
            <div class="dropdown">
              <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenuButton${actividad.id_actividad}" data-bs-toggle="dropdown" aria-expanded="false">
                <i class='bx bx-dots-vertical-rounded'></i>
              </button>
              <ul class="dropdown-menu dropdown-menu-dark" aria-labelledby="dropdownMenuButton${actividad.id_actividad}">
                <li><a class="dropdown-item calificar-estudiantes-btn" href="#" data-id="${actividad.id_actividad}"><i class='bx bx-edit-alt'></i> Calificar estudiantes</a></li>
                <li><a class="dropdown-item delete-actividad-btn" href="#" data-id="${actividad.id_actividad}"><i class='bx bx-trash'></i> Eliminar</a></li>
                <li><a class="dropdown-item gestionar-calificaciones-btn" href="/admin/calificaciones?materiaId=${currentMateriaId}&actividadId=${actividad.id_actividad}"><i class='bx bx-spreadsheet'></i> Gestionar Calificaciones</a></li>
              </ul>
            </div>
          </td>
        `;
      });

      // La función setupPagination utiliza data.totalPages
      setupPagination(data.totalPages, page);
      attachTableEventListeners(); // Attach event listeners after content is loaded

    } catch (error) {
      console.error('Error al cargar las actividades:', error);
      tableBody.innerHTML = '<tr><td colspan="7" class="text-center text-danger">Error al cargar las actividades.</td></tr>';
      mostrarAlerta('Error al cargar las actividades. Por favor, verifica la conexión con el servidor o los datos de la materia.', 'danger');
    }
  }

  function setupPagination(totalPages, currentPage) {
    const paginationContainer = document.getElementById('paginationActividades');
    paginationContainer.innerHTML = ''; // Limpiar paginación existente

    let startPage = Math.max(1, currentPage - 2);
    let endPage = Math.min(totalPages, currentPage + 2);

    if (currentPage <= 3) {
        endPage = Math.min(totalPages, 5);
    } else if (currentPage >= totalPages - 2) {
        startPage = Math.max(1, totalPages - 4);
    }

    if (startPage > 1) {
        paginationContainer.innerHTML += `<li class="page-item"><a class="page-link" href="#" data-page="1">1</a></li>`;
        if (startPage > 2) {
            paginationContainer.innerHTML += `<li class="page-item disabled"><span class="page-link">...</span></li>`;
        }
    }

    for (let i = startPage; i <= endPage; i++) {
      paginationContainer.innerHTML += `
        <li class="page-item ${i === currentPage ? 'active' : ''}">
          <a class="page-link" href="#" data-page="${i}">${i}</a>
        </li>
      `;
    }

    if (endPage < totalPages) {
        if (endPage < totalPages - 1) {
            paginationContainer.innerHTML += `<li class="page-item disabled"><span class="page-link">...</span></li>`;
        }
        paginationContainer.innerHTML += `<li class="page-item"><a class="page-link" href="#" data-page="${totalPages}">${totalPages}</a></li>`;
    }

    // Attach event listeners to new pagination links
    paginationContainer.querySelectorAll('.page-link').forEach(link => {
      link.addEventListener('click', (e) => {
        e.preventDefault();
        const page = parseInt(e.target.dataset.page);
        if (page && page !== currentPage) {
          fetchActividades(currentMateriaId, page);
        }
      });
    });
  }

  function attachTableEventListeners() {
    // Event listeners para botones de editar
    document.querySelectorAll('.edit-actividad-btn').forEach(button => {
      button.removeEventListener('click', handleEditActividad); // Evitar duplicados
      button.addEventListener('click', handleEditActividad);
    });

    // Event listeners para botones de eliminar
    document.querySelectorAll('.delete-actividad-btn').forEach(button => {
      button.removeEventListener('click', handleDeleteActividad); // Evitar duplicados
      button.addEventListener('click', handleDeleteActividad);
    });

    // Event listeners para botones de calificar estudiantes
    document.querySelectorAll('.calificar-estudiantes-btn').forEach(button => {
      button.removeEventListener('click', handleCalificarEstudiantesClick);
      button.addEventListener('click', handleCalificarEstudiantesClick);
    });
  }

  function handleCalificarEstudiantesClick(event) {
    event.preventDefault();
    const actividadId = event.currentTarget.dataset.id;
    abrirModalCalificarEstudiantes(actividadId);
  }

  // ==========================================================
  // MANEJO DE FORMULARIOS Y ACCIONES
  // ==========================================================

  async function anadirActividad(event) {
    event.preventDefault();

    const form = event.target;
    const nombreActividad = form.elements['nombreActividad'].value.trim();
    const descripcionActividad = form.elements['descripcionActividad'].value.trim();
    const fechaEntrega = form.elements['fechaEntrega'].value;
    const ponderacion = form.elements['ponderacion'].value;

    // Validación básica
    if (!nombreActividad || !fechaEntrega || !ponderacion) {
      form.classList.add('was-validated'); // Muestra feedback de Bootstrap
      mostrarAlerta('Por favor, completa todos los campos obligatorios.', 'danger');
      return;
    }

    const data = {
      id_materia: parseInt(currentMateriaId),
      nombre_actividad: nombreActividad,
      descripcion: descripcionActividad,
      fecha_creacion: fechaEntrega,
      ponderacion: parseFloat(ponderacion)
    };

    try {
      const response = await fetch(`${API_BASE_URL}/actividades`, { // Ruta para añadir actividad
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data)
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Error al añadir la actividad.');
      }

      const result = await response.json();
      mostrarAlerta(result.message || 'Actividad creada exitosamente', 'success');
      
      const modalElement = document.getElementById('modalAnadirActividad');
      const bootstrapModal = bootstrap.Modal.getInstance(modalElement);
      if (bootstrapModal) bootstrapModal.hide();
      // Limpiar backdrop manualmente si persiste
      document.querySelectorAll('.modal-backdrop').forEach(el => el.remove());
      document.body.classList.remove('modal-open');
      document.body.style = '';

      form.reset(); // Limpiar el formulario
      form.classList.remove('was-validated'); // Quitar la validación visual

      // Recargar la página tras un breve retraso para mostrar el mensaje
      setTimeout(() => { window.location.reload(); }, 1000);

      await fetchActividadesSummary(currentMateriaId);
      await fetchActividades(currentMateriaId, currentPage); // Recargar la tabla
    } catch (error) {
      console.error('Error al añadir actividad:', error);
      mostrarAlerta(error.message || 'Ocurrió un error al añadir la actividad.', 'danger');
    }
  }

  async function handleEditActividad(event) {
    const actividadId = event.currentTarget.dataset.id;
    try {
      const response = await fetch(`${API_BASE_URL}/actividades/${actividadId}`); // Obtener detalles de la actividad
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      const actividad = await response.json();

      // Llenar el modal de edición con los datos de la actividad
      document.getElementById('editActividadId').value = actividad.id_actividad;
      document.getElementById('editNombreActividad').value = actividad.nombre_actividad;
      document.getElementById('editDescripcionActividad').value = actividad.descripcion || '';
      document.getElementById('editFechaEntrega').value = actividad.fecha_entrega ? new Date(actividad.fecha_entrega).toISOString().split('T')[0] : '';
      document.getElementById('editPonderacion').value = actividad.ponderacion ? actividad.ponderacion.toFixed(2) : '';

      const modalElement = document.getElementById('modalEditarActividad');
      const bootstrapModal = new bootstrap.Modal(modalElement);
      bootstrapModal.show();

    } catch (error) {
      console.error('Error al cargar datos para editar actividad:', error);
      mostrarAlerta('Error al cargar los datos de la actividad para edición.', 'danger');
    }
  }

  async function editarActividad(event) {
    event.preventDefault();

    const form = event.target;
    const actividadId = form.elements['editActividadId'].value;
    const nombreActividad = form.elements['editNombreActividad'].value.trim();
    const descripcionActividad = form.elements['editDescripcionActividad'].value.trim();
    const fechaEntrega = form.elements['editFechaEntrega'].value;
    const ponderacion = form.elements['editPonderacion'].value;

    if (!nombreActividad || !fechaEntrega || !ponderacion) {
      form.classList.add('was-validated');
      mostrarAlerta('Por favor, completa todos los campos obligatorios.', 'danger');
      return;
    }

    const data = {
      nombre_actividad: nombreActividad,
      descripcion: descripcionActividad,
      fecha_entrega: fechaEntrega,
      ponderacion: parseFloat(ponderacion)
    };

    try {
      const response = await fetch(`${API_BASE_URL}/actividades/${actividadId}`, { // Ruta PUT para actualizar
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data)
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Error al actualizar la actividad.');
      }

      const result = await response.json();
      mostrarAlerta(result.message, 'success');

      const modalElement = document.getElementById('modalEditarActividad');
      const bootstrapModal = bootstrap.Modal.getInstance(modalElement);
      if (bootstrapModal) bootstrapModal.hide();

      form.classList.remove('was-validated');
      await fetchActividadesSummary(currentMateriaId);
      await fetchActividades(currentMateriaId, currentPage); // Recargar la tabla
    } catch (error) {
      console.error('Error al actualizar actividad:', error);
      mostrarAlerta(error.message || 'Ocurrió un error al actualizar la actividad.', 'danger');
    }
  }

  async function handleDeleteActividad(event) {
    const actividadId = event.currentTarget.dataset.id;

    const confirmacion = await mostrarConfirmacion(
      `¿Estás seguro de que quieres eliminar esta actividad? Esto también eliminará todas las calificaciones asociadas. Esta acción es irreversible.`,
      `Eliminar Actividad`
    );

    if (confirmacion) {
      try {
        const response = await fetch(`${API_BASE_URL}/actividades/${actividadId}`, {
          method: 'DELETE'
        });

        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.error || 'Error al eliminar la actividad.');
        }

        const result = await response.json();
        mostrarAlerta(result.message, 'success');
        await fetchActividadesSummary(currentMateriaId);
        await fetchActividades(currentMateriaId, currentPage); // Recargar la tabla
      } catch (error) {
        console.error('Error al eliminar actividad:', error);
        mostrarAlerta(error.message || 'Ocurrió un error al eliminar la actividad.', 'danger');
      }
    }
  }

  async function abrirModalCalificarEstudiantes(idActividad) {
    // Obtener detalles de la actividad
    let actividad = {};
    try {
      const respAct = await fetch(`${API_BASE_URL}/actividades/${idActividad}`);
      if (respAct.ok) actividad = await respAct.json();
    } catch {}
    document.getElementById('nombreActividadCalificar').textContent = actividad.nombre_actividad || 'Sin nombre';
    document.getElementById('nombreMateriaCalificar').textContent = currentMateriaNombre || 'Sin materia';

    // Obtener estudiantes de la materia
    const estudiantes = await fetch(`${API_BASE_URL}/materias/${currentMateriaId}/estudiantes`).then(r => r.json());
    // Obtener notas existentes para la actividad
    const notasResp = await fetch(`${API_BASE_URL}/notas/actividad/${idActividad}`).then(r => r.json());
    const notasMap = {};
    (notasResp.notas || []).forEach(n => { notasMap[n.id_estudiante] = n; });
    // Renderizar inputs
    const cont = document.getElementById('listaEstudiantesNotas');
    if (!estudiantes.length) {
      cont.innerHTML = '<div class="alert alert-warning">No hay estudiantes asociados a esta materia.</div>';
    } else {
      cont.innerHTML = estudiantes.map(est => {
        const nota = notasMap[est.id_usuario]?.nota ?? '';
        const comentario = notasMap[est.id_usuario]?.comentarios ?? '';
        return `<div class='row align-items-center mb-2'>
          <div class='col-5'><strong>${est.primer_nombre} ${est.primer_apellido}</strong> <span class='text-muted'>(${est.cedula})</span></div>
          <div class='col-3'><input type='number' class='form-control' name='nota_${est.id_usuario}' value='${nota}' min='0' max='20' step='0.01' placeholder='Nota (0-20)' autocomplete='off'></div>
          <div class='col-4'><input type='text' class='form-control' name='comentario_${est.id_usuario}' value='${comentario}' placeholder='Comentario (opcional)' autocomplete='off'></div>
        </div>`;
      }).join('');
    }
    // Guardar notas
    const form = document.getElementById('formCalificarEstudiantes');
    form.onsubmit = async function(ev) {
      ev.preventDefault();
      let hayError = false;
      estudiantes.forEach(est => {
        const input = form[`nota_${est.id_usuario}`];
        let valor = input.value.replace(',', '.');
        if (valor !== '') {
          const num = parseFloat(valor);
          if (isNaN(num) || num < 0 || num > 20) {
            input.classList.add('is-invalid');
            hayError = true;
          } else {
            input.classList.remove('is-invalid');
          }
        } else {
          input.classList.remove('is-invalid');
        }
      });
      if (hayError) {
        mostrarAlerta('Corrige las notas inválidas (deben ser números entre 0 y 20).', 'danger');
        return;
      }
      const notas = estudiantes.map(est => {
        let notaRaw = form[`nota_${est.id_usuario}`].value;
        if (typeof notaRaw === 'string') notaRaw = notaRaw.replace(',', '.');
        const nota = notaRaw === '' ? null : parseFloat(notaRaw);
        const comentarios = form[`comentario_${est.id_usuario}`].value;
        return { id_estudiante: est.id_usuario, nota: isNaN(nota) ? null : nota, fecha_registro: (new Date()).toISOString().slice(0,10), comentarios };
      }).filter(n => n.nota !== null);
      try {
        const resp = await fetch(`${API_BASE_URL}/notas/actividad/${idActividad}`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ notas })
        });
        if (!resp.ok) throw new Error('Error al guardar notas');
        mostrarAlerta('Notas guardadas correctamente', 'success');
        bootstrap.Modal.getInstance(document.getElementById('modalCalificarEstudiantes')).hide();
        fetchActividadesSummary(currentMateriaId);
        fetchActividades(currentMateriaId, currentPage);
      } catch (err) {
        mostrarAlerta('Error al guardar notas', 'danger');
      }
    };
    new bootstrap.Modal(document.getElementById('modalCalificarEstudiantes')).show();
  }

  // --- COMENTARIO IMPORTANTE: SOLUCIÓN A ERRORES 401 ---
  // Los errores "401 Unauthorized" en las llamadas a la API (ej. /api/usuario, /api/notificaciones)
  // indican que el middleware de autenticación en el backend (`isAuthenticated` en actapi.txt)
  // no está permitiendo el acceso. Asegúrate de que:
  // 1. El usuario esté correctamente autenticado antes de hacer estas llamadas.
  // 2. Si estás en desarrollo y quieres saltarte la autenticación temporalmente,
  //    descomenta las líneas `//isAuthenticated,` en actapi.txt para las rutas que lo requieran.
  //    Una vez resuelto el problema de autenticación, vuelve a comentarlas para mayor seguridad.
  // ----------------------------------------------------

  document.addEventListener('DOMContentLoaded', cargarFiltros);
</script>
